<?php
# This file was automatically generated by the MediaWiki 1.22.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

////$path = array( $IP, "$IP/includes", "$IP/languages" );
////set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "CrossWise";

############################################################# start site-specific
# well this isn't the only cw-specific stuff chuclke
#
# Adapt for subdomains cw.tactileint.org & variations.   decide  on these once.

# sensitive pws and stuff
////echo "<pre>"; var_dump('ser', $_SERVER); echo "</pre>";////
////echo "<pre>"; var_dump('req', $_REQUEST); echo "</pre>";////
////echo "<pre>"; var_dump('env', $_ENV); echo "</pre>";////

 
if (isset($_SERVER) && isset($_SERVER['HTTP_HOST'])) {
	// a typical web request
	$cwHttpHost = $_SERVER['HTTP_HOST'];
	$cwSubDom = (strpos($cwHttpHost, 'cw.') !== false || substr($cwHttpHost, -2) == 'cw');  // should always be true
	$cwStagingDist = (strpos($cwHttpHost, 'tcw') !== false);  // alternate pre-production source tree
	////echo("the subdom is '$cwSubDom' the host is '$cwHttpHost' and the staging is '$cwStagingDist'");
	// ok so it's dtcw.* not tdcw.*
	if ($cwSubDom)
		$cwDebug = ($cwHttpHost[0] == 'd');
	else
		$cwDebug = true; //isset($_REQUEST['debug']);  // never happens

	// set in nginx config while it's still root (/etc/tactileint)
	$wgDBname = $_SERVER['WGDNCP'];
	$wgDBuser = $_SERVER['WGDUCP'];
	$wgDBpassword = $_SERVER['WGDPCP']; 
	
	switch (php_uname('n')) {
	case 'santiago.local':
	case 'santiago':
	case 'flores.local':
	case 'flores':
		$cwProdHost = false;
		$cwFeatSrcDir = "/dvl/crosswise/featSrc/";  // with trailing slash
		break;
	
	case 'ojibwe':
		$cwProdHost = true;
		$cwFeatSrcDir = "/dvl/crosswise/featSrc/";  // with trailing slash
		break;
	
	default:
		die("unknown host name ". php_uname('n') ." (uname -n) in ". __FILE__ . __LINE__);
	}
}
else {
	// one of the maintenence cmds from the cmd line; just bullshit the rest of this
	$_SERVER['SERVER_NAME'] = 'dcw';
	$_SERVER['HTTP_HOST'] = 'localhost';
	$cwHttpHost = 'localhost';
	$cwSubDom = false;
	$cwDebug = false;
	$cwStagingDist = false;
	$wgShowSQLErrors = true;	

	# dont need this if the include file works $wgDBname = "cw_dev";
	#$wgDBuser = $_SERVER['WGDUCP'];
	#$wgDBpassword = $_SERVER['WGDPCP']; 

	// must be root to access this file
	include('/etc/tactileint/crosswise_maintenence_keys.php');
}

############################################################# end site-specific


## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";
$wgScriptExtension = ".php";

# the $_SERVER superglobal has the env as the php process starts.  From the command line we're missing some.
# ??? $_SERVER['SERVER_NAME'] = 'dcw';
////var_dump("\$_SERVER=", $_SERVER);////

## The protocol and server name to use in fully-qualified URLs, t?cw 
# note even if requested dcw.tactileint.org its cw, first server_name
$wgServer = "http://" . $_SERVER['SERVER_NAME'];

## The relative URL path to the skins directory
$wgStylePath = "$wgScriptPath/skins";

## The relative URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo             = "$wgStylePath/crosswise/CrossWiseLogo.jpg";

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "allan@localhost";
$wgPasswordSender = "allan@localhost";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
# see cw-php-handoff.conf       $wgDBname  $wgDBuser  $wgDBpassword

# MySQL specific settings.  A bit old but too lazy to change now.
$wgDBprefix = "cw";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=utf8";

# Experimental charset support for MySQL 5.0.
$wgDBmysql5 = false;

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();

// If this is set to cache, the View page never changes!  even if the url does.
// I gotta read http://www.mediawiki.org/wiki/Manual:Configuration_settings#Cache
// http://www.mediawiki.org/wiki/Manual:Cache
// and figure out something.  someday maybe.
$wgParserCacheType = CACHE_NONE;


## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = false;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/dvl/ImageMagick686/bin/convert";

# InstantCommons allows wiki to use images from http://commons.wikimedia.org
$wgUseInstantCommons = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.UTF-8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
#$wgHashedUploadDirectory = false;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/Names.php
$wgLanguageCode = "en";

$wgSecretKey = "e6f7d5589098f36b83eb64720769c50cdee8b6b12893d69d94eeb71f8c606a12";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "c5faaddbb97ade9d";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'cologneblue', 'monobook', 'vector':
### must be all lowercase otherwise doesnt work.
$wgDefaultSkin = "crosswise";

# omit these skins in user prefs: all of them but crosswise.  evil laugh.  actually there's cross-calls, sorry.  vector isnt in this list; proba few more new skins ////
# omit all the other skins besides crosswise from the preferences page so users can't change it
$wgSkipSkins = array('cologneblue', 'common', 'modern', 'monobook', 'vector');
require_once( "$IP/skins/crosswise/crosswise.php" );

# turn this on to get rid of the Skin preference if you want to force cw skin
//$wgHiddenPrefs[] = 'skin';

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
## isnt this superfluous if we turn off all the caches?  not the day before release.
#$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );

############################################################# Permissions
#
# The following permissions were set based on your choice in the installer
#$wgGroupPermissions['*']['edit'] = false;

// Restrict anonymous editing & stuff.  see also DefaultSettings.php 
// anonymous readers
$wgGroupPermissions['*']['createtalk'] = $wgGroupPermissions['*']['createpage'] = 
		$wgGroupPermissions['*']['edit'] = $wgGroupPermissions['*']['writeapi'] = false;

// registered but not email confirmed - still not good enough (although defaults leave all this open)
$wgGroupPermissions['user']['createtalk'] = $wgGroupPermissions['user']['createpage'] = false;
$wgGroupPermissions['user']['edit'] = $wgGroupPermissions['user']['writeapi'] = false;
// seems user also gets a few other side-effective permissions by default, turnem off
$wgGroupPermissions['user']['minoredit'] = false;
$wgGroupPermissions['user']['move'] = false;
$wgGroupPermissions['user']['move-subpages'] = false;
$wgGroupPermissions['user']['move-rootuserpages'] = false;
$wgGroupPermissions['user']['reupload-shared'] = false;
$wgGroupPermissions['user']['reupload'] = false;
$wgGroupPermissions['user']['purge'] = false;
$wgGroupPermissions['user']['read'] = false;
$wgGroupPermissions['user']['upload'] = false;


// default 'autoconfirmed' smartgroup, seems to be 'slightly more trusted editor'.
// THese figure into wgAutopromote-ing in DefaultSettings.php
// we don't have to use this for anything... we roll our own
//$wgAutoConfirmAge = 3600 * 24 * 7;  // must wait (seconds) after reg to have extra privs
//$wgAutoConfirmCount = 20;  // number of edits before is autoconfirmed

// note wgAutopromote assigns on-the-fly privs; user's groups in the DB don't change
// they're kindof like 'smart groups'

// hacker
// our entry level smartgroup member has confirmed by email, and has 
// waited around for an hour (or whatever) before attempting an edit.
// confuses a lot of boneheaded spam scripts
// regular member is allowed to edit existing pages/sections
$wgAutopromote['hacker'] = array( '&',
		APCOND_EMAILCONFIRMED,
		array( APCOND_AGE, 2 * 3600 ),  // must wait (seconds) after reg to hack
	);
$wgGroupPermissions['hacker']['edit'] = true;

// a wizard has some experience and patience.  they can create pages.
$wgAutopromote['wizard'] = array( '&',
		APCOND_EMAILCONFIRMED,
		array( APCOND_EDITCOUNT, 20 ),  // has committed this many edits
		array( APCOND_AGE_FROM_EDIT, 3600 * 24 * 7 ),  // must wait (seconds) after first edit
	);
$wgGroupPermissions['wizard']['createtalk'] = true;
$wgGroupPermissions['wizard']['createpage'] = true;
$wgGroupPermissions['wizard']['minoredit'] = true;  // make minor edits without alerting watchers

// guru: I don't know what this'll do yet.
$wgAutopromote['guru'] = array( '&',
					APCOND_EMAILCONFIRMED,
					array( APCOND_AGE, 1e9 ),  // must wait (seconds) after reg to hack
			);

	
// all that stuff like creating new pages, renaming pages, we powerful people can do.
$wgGroupPermissions['bureaucrat']['createtalk'] = $wgGroupPermissions['bureaucrat']['createpage'] = true;
$wgGroupPermissions['bureaucrat']['edit'] = $wgGroupPermissions['bureaucrat']['writeapi'] = true;
$wgGroupPermissions['bureaucrat']['minoredit'] = true;
$wgGroupPermissions['bureaucrat']['move'] = true;
$wgGroupPermissions['bureaucrat']['move-subpages'] = true;
$wgGroupPermissions['bureaucrat']['move-rootuserpages'] = true;
$wgGroupPermissions['bureaucrat']['reupload-shared'] = true;
$wgGroupPermissions['bureaucrat']['reupload'] = true;
$wgGroupPermissions['bureaucrat']['purge'] = true;
$wgGroupPermissions['bureaucrat']['read'] = true;
$wgGroupPermissions['bureaucrat']['upload'] = true;


$wgEmailConfirmToEdit=true;  // old flag to require email conf for any edits
$wgImplicitGroups = array('user', 'autoconfirmed');  // on listusers, omit these groups
//$wgImplicitGroups = array();  // on listusers, omit this group

# Do not allow pages with the following words (remove gradually over time):
$wgSpamRegex = '!(African|Amortization|Cash|Christmas|Consolidation\
|Dance|Debt|Equity|Excel\
|Fax|african|amortization\
|cash|christmas|consolidation|craft|dance\
|debt|equity|excel|fax)!';

# less-despeate attempt to block 200k spam-generating IPs
// i don't think this helped much
//require_once("/home/tactile/cwMisc/bannedips.php");

# patrol (require my confirmation) upon new pages or any edits
$wgUseRCPatrol = $wgUseNPPatrol = true;

/* This setting allows a wiki to require special permissions to edit some namespaces. By default, the only restriction is that the MediaWiki namespace can only be edited by users with the 'editinterface' permission (by default: sysops).
The keys of the array are namespace numbers, and the values are simple arrays of permission names. If you list more than one permission for a given namespace, a user must have all of them to edit pages in that namespace.
Since 1.14, the MediaWiki: namespace is unconditionally protected to users with 'editinterface' right (same as in previous versions). This is set in Setup.php and cannot be modified in LocalSettings.php since otherwise it's too easy to set it incorrectly and leave the wiki insecure. If you want to allow other groups than sysops to edit the MediaWiki: namespace, then grant the 'editinterface' right to those groups. */
// only sysops (me) can edit Categories
$wgNamespaceProtection[NS_CATEGORY] = array( 'editinterface' );


############################################################# Extensions
#
# Enabled Extensions. Most extensions are enabled by including the base extension file here
# but check specific extension documentation for more details
# The following extensions were automatically enabled:
require_once "$IP/extensions/Cite/Cite.php";
require_once "$IP/extensions/ConfirmEdit/ConfirmEdit.php";
require_once "$IP/extensions/InputBox/InputBox.php";
require_once "$IP/extensions/Nuke/Nuke.php";
require_once "$IP/extensions/Renameuser/Renameuser.php";
require_once "$IP/extensions/SimpleAntiSpam/SimpleAntiSpam.php";
require_once "$IP/extensions/WikiEditor/WikiEditor.php";

###################################### End of automatically generated settings.
###################################### Add more configuration options below.
# allan's tracing log thing
// my hack debug tracing; nice and simple. exclude on production.
if ($cwDebug) {
	//////////////////////////////////////////// really debug stuff for dev only!!!
	include_once("$IP/extensions/footLog/footLog.body.php");
	
	// this is for dev only; said to do this in an error message.   
	// good idea.  Gives traceback & msg and stuff.
	$wgShowExceptionDetails = true;
	$wgShowSQLErrors=true;   // showing the SQL which caused the error
	
	//$wgShowDebug = true;  // Displays debug data at the bottom of the content area
	// (above footer)  about 40 lines for front page + 120 more if sql is on
	
	// wfDebug() appends to this file.  theoretically.   cant get it to work
	//$wgDebugLogFile = "$IP/maintenence/debug.log";
	
	// Debug text passed to function wfDebug() is included in top of pg comment
	// about same as $wgShowDebug text
	$wgDebugComments = true;
	
	// maybe 120 lines to open front page
	$wgDebugDumpSql = true;  // SQL statements are dumped via wfDebug()
	
	//$wgDebugRawPage = true;  // ??!?Avoid overlapping debug entries by leaving out CSS.??!?
	
	//$wgDevelopmentWarnings = true;  // If set to true MediaWiki will throw notices for some possible error conditions and for deprecated functions.  Warning - v1.16.0 has not been released yet. This feature may be modified or removed before final release.
	
	// this forces re-evaluation of the page each time.  
	// Handy but can mask some production problems.  
	// always on see above $wgParserCacheType = CACHE_NONE;
}
else {
	// dummies for production
	function flLog($x) { }
	function flExport($x) { }
}

# this is it - the crosswise code.  hope it does't crash.
require_once("$IP/extensions/cwMain.php");

####	// captcha method: simple lame arithmetic qs
####	$wgCaptchaClass = 'SimpleCaptcha';
####
####	// captcha method: my list of quiz questions
####	//$wgCaptchaClass = 'QuestyCaptcha';
####	//require_once("$IP/extensions/ConfirmEdit/QuestyCaptcha.php");
####	//require_once("$IP/extensions/ConfirmEdit/captchaQuestions.php");
####
####	// when?  page creations should be just me.  
####	$wgCaptchaTriggers['edit'] = false;   // modify a page
####	$wgCaptchaTriggers['create'] = true;  // create a page (this is also disallowed by permisions)
####	$wgCaptchaTriggers['addurl'] = true;  // checkin page edits that include a url
####	$wgCaptchaTriggers['createaccount'] = true;  // frikkin robots
####	$wgCaptchaTriggers['badlogin'] = true;  // thwart pw brute force attacks
####
####// UserMerge extension allows me to eliminate spammer accounts.  See page Special:UserMerge
####require_once( "$IP/extensions/UserMerge/UserMerge.php" );
####	$wgGroupPermissions['bureaucrat']['usermerge'] = true;
####	$wgUserMergeProtectedGroups = array('bureaucrat', 'administrator');  # optional

